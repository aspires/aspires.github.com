<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>ASpires</title>
 <link href="http://twitter.com/austinspires/atom.xml" rel="self"/>
 <link href="http://twitter.com/austinspires/"/>
 <updated>2014-02-15T16:12:49-08:00</updated>
 <id>http://twitter.com/austinspires</id>
 <author>
   <name>Austin Spires</name>
   <email></email>
 </author>

 
 <entry>
   <title>Grok the customer</title>
   <link href="http://twitter.com/austinspires/2014/02/15/grok-the-customer/"/>
   <updated>2014-02-15T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/02/15/grok-the-customer</id>
   <content type="html">&lt;p&gt;If you&amp;#39;re in sales or marketing for a startup, you won&amp;#39;t be successful until you understand your customer
completely at a fundamental level. If you&amp;#39;re a geek, you know this level understanding as &amp;quot;groking.&amp;quot;&lt;/p&gt;

&lt;p&gt;But, if you&amp;#39;re not familiar with the term Grok, Wikipedia has the perfect definition for you:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grok means to understand so thoroughly that the observer becomes a part of the observed—to merge, blend,
intermarry, lose identity in group experience. It means almost everything that we mean by religion,
philosophy, and science—and it means as little to us (because of our Earthling assumptions) as color
means to a blind man.
-  &lt;a href=&quot;https://en.wikipedia.org/wiki/Grok&quot;&gt;Robert A. Heinlein, 1961, Stranger in a Strange Land&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, that definition is a little overly sci-fi, but you get the point. It&amp;#39;s a total and complete relationship
understanding with something. To the point where you can have full empathy and connection without concious
action.&lt;/p&gt;

&lt;p&gt;When you represent a startup, everything is against you. You don&amp;#39;t have brand recognition, you don&amp;#39;t have
amazing references, and you most certainly don&amp;#39;t have the resources that large companies can provide their
teams. The only advantage you can give yourself is to better understand your customers.&lt;/p&gt;

&lt;p&gt;This is why startup founders are often the best salespeople for their company; they understand the customer,
the market, and the product better than anyone else. There&amp;#39;s a reason why they founded the company. They grok
their customers because they likely were the archetypical customer at one point. It&amp;#39;s easy for them.&lt;/p&gt;

&lt;p&gt;But what if you&amp;#39;re not a founder? How can you get to this level of understanding? It&amp;#39;s not easy.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re going to grok your customer -- &lt;em&gt;really&lt;/em&gt; understand them at a fundamental level -- you&amp;#39;re going to have
to completely immerse yourself in their culture. Read what they read. Do what they do. Attend their conferences,
buy their books, build what they build.&lt;/p&gt;

&lt;p&gt;After a while, you won&amp;#39;t have customers anymore. You&amp;#39;ll have peers and friends who use what you make.
That&amp;#39;s what makes the difference.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not easy. Not many people are willing or able to go to that length. But, if you&amp;#39;re with a
tiny upstart product, it&amp;#39;s the only advantage you have.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Shoutout to Ops</title>
   <link href="http://twitter.com/austinspires/2014/01/20/shoutout-to-ops/"/>
   <updated>2014-01-20T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/20/shoutout-to-ops</id>
   <content type="html">&lt;p&gt;There are people in your company that you probably don&amp;#39;t know about. That is: you might be acquainted with them,
but you may not be familiar with their role. They&amp;#39;re your operations team. They keep your site up and running.
They make it so that you can deploy without downtime. They fight DDOS attacks and they make
sure your machines are in tip top shape.&lt;/p&gt;

&lt;p&gt;It’s a known truth: managing an infrastructure is hard. It&amp;#39;s a labor of love, and the larger a site gets,
the more complex the operations challenges become. There are more pager escalations in the middle of the
night, more edge cases to handle, and more risk to manage when deploying. Increasing complexity is a truism when
making the internet, but it shouldn&amp;#39;t suck any more than it needs to.&lt;/p&gt;

&lt;p&gt;When a site becomes successful it usually requires more technology and more processes to scale. But a site&amp;#39;s
success shouldn&amp;#39;t mandate introducing anything that keeps your ops team from doing their job. Friction is
lame, but paying for it is even worse. It’s something we obsess over when we work on Fastly.
We&amp;#39;re building a product for ops, and we want to build the greatest operations tool possible. We don&amp;#39;t want
our friends and colleagues to do more work because of us. We&amp;#39;ve seen how painful scaling can get, and we want
to do everything we can to make the process easy. The decisions we’ve made about our product are to
make engineering easier, not harder.&lt;/p&gt;

&lt;p&gt;So, the next time you&amp;#39;re hanging out with your coworkers, take some time to raise a toast, pour one out, or verb
your favorite noun to your ops team. They&amp;#39;re on call right now, so try not to break the build.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Is it better to be fast or good?</title>
   <link href="http://twitter.com/austinspires/2014/01/17/support-time-v-quality/"/>
   <updated>2014-01-17T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/17/support-time-v-quality</id>
   <content type="html">&lt;p&gt;In support, there are two gold standards for measuring an organization&amp;#39;s quality: speed of responsiveness, and quality of response.
Focusing heavily on one of these two areas will clearly result in a high level of amazement. The amazement is the currency of support.
It&amp;#39;s not the most important thing -- it&amp;#39;s the only thing.&lt;/p&gt;

&lt;p&gt;At the same time, it&amp;#39;s impractical to focus on one &lt;em&gt;at the expense of&lt;/em&gt; the other. If someone has to wait several days for a response,
a modern poet won&amp;#39;t be able to save the experience. On the other hand, an inept, but immediate response will infuriate people.&lt;/p&gt;

&lt;p&gt;So, how do you reconcile the two. The most obvious answer is to build a system where great support people -- people who can wield
language like a painter wields a brush -- are do their best work as quickly as they comfortably can.&lt;/p&gt;

&lt;p&gt;Building an system like that is a holistic challenge. Few companies think about support beyond ticket counts and potential upselling, let
alone providing a quality experience.&lt;/p&gt;

&lt;p&gt;But, we got off track. Which is it? Is it better to be fast or good?&lt;/p&gt;

&lt;p&gt;The secret is that it&amp;#39;s not about the answer. If you&amp;#39;re thinking about the question you&amp;#39;re already winning.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is trust</title>
   <link href="http://twitter.com/austinspires/2014/01/13/what-is-trust/"/>
   <updated>2014-01-13T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/13/what-is-trust</id>
   <content type="html">&lt;p&gt;When you and I use a product, there&amp;#39;s an inherent element of trust. We trust it will straight up work as advertised, we trust that the
product won&amp;#39;t put us at risk, and we trust that the product will improve my life in some way.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a human connection to something that&amp;#39;s often very inhuman. At best, most people ignore or gloss over the inherent nature of trust in
product/user relationship. At worst, they exploit it.&lt;/p&gt;

&lt;p&gt;But, I can&amp;#39;t recall a single moment where someone outright aknowleged it.&lt;/p&gt;

&lt;p&gt;Thinking about the products I use on a daily basis, every use or habit is rooted in an aspect of trust:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gmail shoud be up and working at all times, and they shouldn&amp;#39;t leak my email to the world.&lt;/li&gt;
&lt;li&gt;Zendesk delivers my support responses immediately, and processes replies directly to me.&lt;/li&gt;
&lt;li&gt;GitHub keeps my code, serves my site, and syncs up with branches as I push them.&lt;/li&gt;
&lt;li&gt;My macbook saves things, has a long battery life, and doesn&amp;#39;t impede my workflow.&lt;/li&gt;
&lt;li&gt;Dropbox syncs my stuff and serves as a simple backup.&lt;/li&gt;
&lt;li&gt;The internet works. Like magic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Low and behold, despite human beings operating these things, they work. The more I use these services, the more trust I place in them.
They all will apologize for incidents that break this trust (downtime, security incidents, etc.), but no one addresses the core emotion.&lt;/p&gt;

&lt;h2&gt;Why is trust a third rail?&lt;/h2&gt;

&lt;p&gt;It doesn&amp;#39;t have to be, and it shouldn&amp;#39;t. When a person builds a personal relationship with something you make, don&amp;#39;t ignore it. It&amp;#39;s a
chance to build a meaningful connection for a once.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fastly Benchmark</title>
   <link href="http://twitter.com/austinspires/2014/01/12/fastly-benchmark/"/>
   <updated>2014-01-12T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/12/fastly-benchmark</id>
   <content type="html">&lt;p&gt;I got tired of looking at third party benchmarks of Fastly using closed source tools. They were black boxes, so I couldn&amp;#39;t justify the
numbers (good or bad) that they claimed. So, &lt;a href=&quot;https://twitter.com/deflatermouse&quot;&gt;Simon&lt;/a&gt; and I knocked out the ultimate &lt;a href=&quot;http://0.media.collegehumor.cvcdn.com/56/95/7890f6112c0b7925960efaa915a58a56-dropmic3.gif&quot;&gt;mic-droppingly&lt;/a&gt; honest benchmarking we could.&lt;/p&gt;

&lt;p&gt;Take a look at the Gist &lt;a href=&quot;https://gist.github.com/aspires/8189975&quot;&gt;here&lt;/a&gt;, but the script is (intentionally) so short that I can paste it in:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

# Dependencies: ApacheBench, MTR

REQUESTS=100
CONCURRENCY=10
FASTLY=&amp;#39;www.example.com.global.prod.fastly.net&amp;#39;
CURRENT=&amp;#39;www.example.com&amp;#39;

for url in &amp;#39;path/to/test&amp;#39; &amp;#39;path/to/test2&amp;#39; &amp;#39;path/to/test3&amp;#39;; do
  for host in $CURRENT $FASTLY; do
    ab -n $REQUESTS -c $CONCURRENCY &amp;quot;http://${host}/${url}&amp;quot; &amp;gt;&amp;gt; fastly.ab.log
    #echo &amp;quot;http://${host}/${url}&amp;quot;
  done
done

for host in $CURRENT $FASTLY; do
  mtr -c $REQUESTS -w -r $host &amp;gt;&amp;gt; fastly.mtr.log
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. No fancy whiz-bangery. No grandisose flash and flare. Just tried and true metrics tools that have been used in the industry for decades.&lt;/p&gt;

&lt;h2&gt;So, what&amp;#39;s going on?&lt;/h2&gt;

&lt;p&gt;The script uses two benchmarking tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/ApacheBench&quot;&gt;ApacheBench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/MTR_(software&quot;&gt;MTR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The user provides their existing domain, and the fastly generated service domain. &lt;strong&gt;Note: the site and service need to be configured proper
ly for caching for the test to be realistic.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From there, the script tests as many paths as the user desires with &lt;code&gt;ab&lt;/code&gt;. The primary metric you want to look for here is the connection
times and the percentile results. These readouts are going to be a good approximation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Time_To_First_Byte&quot;&gt;TTFB&lt;/a&gt; for that object.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;#Other apache heath stats

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:       86   92   3.2     91      98
Processing:   531  239 155.0    860    1234
Waiting:      234  640 145.8    649     962
Total:        675  931 155.3    945    1325

Percentage of the requests served within a certain time (ms)
  50%    955
  66%   1029
  75%   1053
  80%   1058
  90%   1112
  95%   1197
  98%   1216
  99%   1325
 100%   1325 (longest request)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second command, for MTR, tests 100 cycles of network connection for each host. The readout should give you about overall network
performance. The preformance you see here should correlate with the &lt;code&gt;ab&lt;/code&gt; results, but it&amp;#39;s a seperate approach to verifying latency
improvements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;HOST: ip-172-31-2-216                                 Loss%   Snt   Last   Avg  Best  Wrst StDev
  1. ec2-79-125-1-98.eu-west-1.compute.amazonaws.com  0.0%   100    0.8   1.2   0.6  27.8   3.2
  2. 178.236.0.220                                    0.0%   100    0.9   2.0   0.9  43.8   5.3
  3. 178.236.0.182                                    0.0%   100    1.6   1.6   1.2  18.0   1.8
  5. 178.236.3.52                                     0.0%   100   10.9  13.0  10.6  70.0   9.8
  6. 82.112.115.161                                   0.0%   100   11.6  11.5  11.1  12.8   0.2
  7. ae-13.r02.londen03.uk.bb.gin.ntt.net             0.0%   100   12.1  12.0  11.3  13.8   0.3
  8. te0-7-0-9.ccr21.lon02.atlas.cogentco.com         0.0%   100   12.4  12.0  11.3  13.8   0.5
  9. be2328.ccr21.lon01.atlas.cogentco.com            0.0%   100   11.5  11.8  11.5  13.9   0.4
 10. te2-1.ccr01.lon03.atlas.cogentco.com             0.0%   100   12.1  24.8  11.9 180.9  38.2
 11. ???                                             100.0   100    0.0   0.0   0.0   0.0   0.0
 12. 185.31.18.185                                    0.0%   100   14.9  12.5  11.0  15.4   1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;The rule going forward&lt;/h1&gt;

&lt;p&gt;We&amp;#39;re not stoping here with benchmarking and evaluation options. We want more exaustive tools that go deeper into edge cases, and don&amp;#39;t
require as much external configuration. Right now, you need to have &lt;code&gt;ab&lt;/code&gt; and &lt;code&gt;mtr&lt;/code&gt; on your machine, and you realistically need a
few EC2 instances or other servers to test global performance. You need to have your Fastly service set up to cache properly,
otherwise the tests will all be cache misses. Also, the &lt;code&gt;ab&lt;/code&gt; test sucks on mac; it errors out every other benchmark. This is
too much work for such a simple script. It needs to be improved upon.&lt;/p&gt;

&lt;p&gt;But, the core principles of a simple, open, reproducable test are things that will be around in the future.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Things I wish I was better at</title>
   <link href="http://twitter.com/austinspires/2014/01/11/things-i-wish-i-was-better-at/"/>
   <updated>2014-01-11T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/11/things-i-wish-i-was-better-at</id>
   <content type="html">&lt;h2&gt;I am imperfect&lt;/h2&gt;

&lt;p&gt;I have many flaws, character and otherwise. Some are more critical to fix than others.
But, here&amp;#39;s a list of things I need to step up my game on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wish I were more patient.&lt;/li&gt;
&lt;li&gt;I wish I were better at finishing projects.&lt;/li&gt;
&lt;li&gt;I wish I took learning more seriously.&lt;/li&gt;
&lt;li&gt;I wish I were more active in my community.&lt;/li&gt;
&lt;li&gt;I wish I were better at forgiveness. Including forgiving myself.&lt;/li&gt;
&lt;li&gt;I wish I were a better parter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, simply &amp;quot;wishing&amp;quot; does nothing. It&amp;#39;s bullshit.&lt;/p&gt;

&lt;p&gt;I won&amp;#39;t be wishing anymore. I guess I&amp;#39;ll be working.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Let's try this again.</title>
   <link href="http://twitter.com/austinspires/2014/01/11/new-setup/"/>
   <updated>2014-01-11T00:00:00-08:00</updated>
   <id>http://twitter.com/austinspires/2014/01/11/new-setup</id>
   <content type="html">&lt;h2&gt;Moving to a new layout&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s hope to God this doesn&amp;#39;t result in &lt;a href=&quot;https://twitter.com/holman/status/418875911182614529&quot;&gt;Holman drinking more.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a few older, long posts I&amp;#39;ll port over. But, the goal here is short stuff. Let&amp;#39;s see if that makes a difference.&lt;/p&gt;
</content>
 </entry>
 

</feed>
